{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"TokenModel": {
				"properties": {
					"address": {
						"type": "string"
					},
					"symbol": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"decimals": {
						"type": "number",
						"format": "double"
					},
					"chain": {
						"type": "string"
					},
					"logoURI": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"address",
					"symbol",
					"name",
					"decimals",
					"chain",
					"logoURI"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenPriceModel": {
				"properties": {
					"symbol": {
						"type": "string"
					},
					"price": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"symbol",
					"price"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Address": {
				"type": "string",
				"description": "20 byte Ethereum address encoded as a hex with `0x` prefix."
			},
			"TokenAmount": {
				"type": "string",
				"description": "Amount of a token. `uint256` encoded in decimal."
			},
			"AppDataHash": {
				"type": "string",
				"description": "32 bytes encoded as hex with `0x` prefix.\r\nIt's expected to be the hash of the stringified JSON object representing the `appData`."
			},
			"OrderKind": {
				"description": "Is this order a buy or sell?",
				"enum": [
					"buy",
					"sell"
				],
				"type": "string"
			},
			"SellTokenSource": {
				"description": "Where should the `sellToken` be drawn from?",
				"enum": [
					"erc20",
					"internal",
					"external"
				],
				"type": "string"
			},
			"BuyTokenDestination": {
				"description": "Where should the `buyToken` be transferred to?",
				"enum": [
					"erc20",
					"internal"
				],
				"type": "string"
			},
			"SigningScheme": {
				"description": "How was the order signed?",
				"enum": [
					"eip712",
					"ethsign",
					"presign",
					"eip1271"
				],
				"type": "string"
			},
			"OrderParameters": {
				"properties": {
					"signingScheme": {
						"$ref": "#/components/schemas/SigningScheme"
					},
					"buyTokenBalance": {
						"$ref": "#/components/schemas/BuyTokenDestination"
					},
					"sellTokenBalance": {
						"$ref": "#/components/schemas/SellTokenSource"
					},
					"partiallyFillable": {
						"type": "boolean",
						"description": "Is the order fill-or-kill or partially fillable?"
					},
					"kind": {
						"$ref": "#/components/schemas/OrderKind",
						"description": "The kind is either a buy or sell order."
					},
					"feeAmount": {
						"$ref": "#/components/schemas/TokenAmount",
						"description": "feeRatio * sellAmount + minimal_fee in atoms."
					},
					"appData": {
						"$ref": "#/components/schemas/AppDataHash"
					},
					"validTo": {
						"type": "number",
						"format": "double",
						"description": "Unix timestamp (`uint32`) until which the order is valid."
					},
					"buyAmount": {
						"$ref": "#/components/schemas/TokenAmount",
						"description": "Amount of `buyToken` to be bought in atoms."
					},
					"sellAmount": {
						"$ref": "#/components/schemas/TokenAmount",
						"description": "Amount of `sellToken` to be sold in atoms."
					},
					"receiver": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Address"
							}
						],
						"nullable": true,
						"description": "An optional Ethereum address to receive the proceeds of the trade instead of the owner (i.e. the order signer)."
					},
					"buyToken": {
						"$ref": "#/components/schemas/Address",
						"description": "ERC-20 token to be bought."
					},
					"sellToken": {
						"$ref": "#/components/schemas/Address",
						"description": "ERC-20 token to be sold."
					}
				},
				"required": [
					"partiallyFillable",
					"kind",
					"feeAmount",
					"appData",
					"validTo",
					"buyAmount",
					"sellAmount",
					"buyToken",
					"sellToken"
				],
				"type": "object",
				"description": "Order parameters."
			},
			"CowswapQuote": {
				"properties": {
					"verified": {
						"type": "boolean",
						"description": "Whether it was possible to verify that the quoted amounts are accurate using a simulation."
					},
					"id": {
						"type": "number",
						"format": "double",
						"description": "Quote ID linked to a quote to enable providing more metadata when analysing order slippage."
					},
					"expiration": {
						"type": "string",
						"description": "Expiration date of the offered fee. Order service might not accept\r\nthe fee after this expiration date. Encoded as ISO 8601 UTC."
					},
					"from": {
						"$ref": "#/components/schemas/Address"
					},
					"quote": {
						"$ref": "#/components/schemas/OrderParameters"
					}
				},
				"required": [
					"verified",
					"expiration",
					"quote"
				],
				"type": "object",
				"description": "An order quoted by the backend that can be directly signed and\r\nsubmitted to the order creation backend."
			},
			"QuoteRequest.swapType": {
				"description": "Whether to use the amount as the output or the input for the basis of the swap:\n- `EXACT_INPUT` - request output amount for exact input.\n- `EXACT_OUTPUT` - request output amount for exact output. The `refundTo` address will always receive excess tokens back even after the swap is complete.",
				"enum": [
					"EXACT_INPUT",
					"EXACT_OUTPUT"
				],
				"type": "string"
			},
			"QuoteRequest.depositType": {
				"description": "Type of the deposit address:\n- `ORIGIN_CHAIN` - deposit address on the origin chain\n- `INTENTS` - **account ID** inside near intents to which you should transfer assets inside intents.",
				"enum": [
					"ORIGIN_CHAIN",
					"INTENTS"
				],
				"type": "string"
			},
			"QuoteRequest.refundType": {
				"description": "Type of refund address:\n- `ORIGIN_CHAIN` - assets will be refunded to `refundTo` address on the origin chain\n- `INTENTS` - assets will be refunded to `refundTo` intents account",
				"enum": [
					"ORIGIN_CHAIN",
					"INTENTS"
				],
				"type": "string"
			},
			"QuoteRequest.recipientType": {
				"description": "Type of recipient address:\n- `DESTINATION_CHAIN` - assets will be transferred to chain of `destinationAsset`\n- `INTENTS` - assets will be transferred to account inside intents",
				"enum": [
					"DESTINATION_CHAIN",
					"INTENTS"
				],
				"type": "string"
			},
			"AppFee": {
				"properties": {
					"fee": {
						"type": "number",
						"format": "double",
						"description": "Fee for this recipient as part of amountIn in basis points (1/100th of a percent), e.g. 100 for 1% fee"
					},
					"recipient": {
						"type": "string",
						"description": "Intents Account ID where this fee will be transferred to"
					}
				},
				"required": [
					"fee",
					"recipient"
				],
				"type": "object"
			},
			"QuoteRequest": {
				"properties": {
					"appFees": {
						"items": {
							"$ref": "#/components/schemas/AppFee"
						},
						"type": "array",
						"description": "List of recipients and their fees"
					},
					"quoteWaitingTimeMs": {
						"type": "number",
						"format": "double",
						"description": "Time in milliseconds user is willing to wait for quote from relay."
					},
					"referral": {
						"type": "string",
						"description": "Referral identifier(lower case only)"
					},
					"deadline": {
						"type": "string",
						"description": "Timestamp in ISO format, that identifies when user refund will begin if the swap isn't completed by then."
					},
					"recipientType": {
						"$ref": "#/components/schemas/QuoteRequest.recipientType",
						"description": "Type of recipient address:\n- `DESTINATION_CHAIN` - assets will be transferred to chain of `destinationAsset`\n- `INTENTS` - assets will be transferred to account inside intents"
					},
					"recipient": {
						"type": "string",
						"description": "Recipient address. The format should match `recipientType`."
					},
					"refundType": {
						"$ref": "#/components/schemas/QuoteRequest.refundType",
						"description": "Type of refund address:\n- `ORIGIN_CHAIN` - assets will be refunded to `refundTo` address on the origin chain\n- `INTENTS` - assets will be refunded to `refundTo` intents account"
					},
					"refundTo": {
						"type": "string",
						"description": "Address for user refund."
					},
					"amount": {
						"type": "string",
						"description": "Amount to swap as the base amount (can be switched to exact input/output using the dedicated flag), denoted in the smallest unit of the specified currency (e.g., wei for ETH)."
					},
					"destinationAsset": {
						"type": "string",
						"description": "ID of the destination asset."
					},
					"depositType": {
						"$ref": "#/components/schemas/QuoteRequest.depositType",
						"description": "Type of the deposit address:\n- `ORIGIN_CHAIN` - deposit address on the origin chain\n- `INTENTS` - **account ID** inside near intents to which you should transfer assets inside intents."
					},
					"originAsset": {
						"type": "string",
						"description": "ID of the origin asset."
					},
					"slippageTolerance": {
						"type": "number",
						"format": "double",
						"description": "Slippage tolerance for the swap. This value is in basis points (1/100th of a percent), e.g. 100 for 1% slippage."
					},
					"swapType": {
						"$ref": "#/components/schemas/QuoteRequest.swapType",
						"description": "Whether to use the amount as the output or the input for the basis of the swap:\n- `EXACT_INPUT` - request output amount for exact input.\n- `EXACT_OUTPUT` - request output amount for exact output. The `refundTo` address will always receive excess tokens back even after the swap is complete."
					},
					"dry": {
						"type": "boolean",
						"description": "Flag indicating whether this is a dry run request.\nIf `true`, the response will **NOT** contain the following fields:\n- `depositAddress`\n- `timeWhenInactive`\n- `deadline`"
					}
				},
				"required": [
					"deadline",
					"recipientType",
					"recipient",
					"refundType",
					"refundTo",
					"amount",
					"destinationAsset",
					"depositType",
					"originAsset",
					"slippageTolerance",
					"swapType",
					"dry"
				],
				"type": "object"
			},
			"Quote": {
				"properties": {
					"timeEstimate": {
						"type": "number",
						"format": "double",
						"description": "Estimated time in seconds for swap to be executed after the deposit transaction is confirmed"
					},
					"timeWhenInactive": {
						"type": "string",
						"description": "Time when the deposit address will become cold and swap processing will take more time"
					},
					"deadline": {
						"type": "string",
						"description": "Time when the deposit address will become inactive and funds might be lost"
					},
					"minAmountOut": {
						"type": "string",
						"description": "Minimum amount with slippage taken into account"
					},
					"amountOutUsd": {
						"type": "string",
						"description": "Amount of the destination asset equivalent in USD"
					},
					"amountOutFormatted": {
						"type": "string",
						"description": "Amount of the destination asset in readable format"
					},
					"amountOut": {
						"type": "string",
						"description": "Amount of the destination asset"
					},
					"minAmountIn": {
						"type": "string",
						"description": "Minimum amount of the origin asset that will be used for swap"
					},
					"amountInUsd": {
						"type": "string",
						"description": "Amount of the origin assets equivalent in USD"
					},
					"amountInFormatted": {
						"type": "string",
						"description": "Amount of the origin asset in readable format"
					},
					"amountIn": {
						"type": "string",
						"description": "Amount of the origin asset"
					},
					"depositAddress": {
						"type": "string",
						"description": "The deposit address on the chain of `originAsset` in case if `depositType` is `ORIGIN_CHAIN`.\n\nThe deposit address inside of near intents (the verifier smart contract) in case if `depositType` is `INTENTS`."
					}
				},
				"required": [
					"timeEstimate",
					"minAmountOut",
					"amountOutUsd",
					"amountOutFormatted",
					"amountOut",
					"minAmountIn",
					"amountInUsd",
					"amountInFormatted",
					"amountIn"
				],
				"type": "object"
			},
			"NearIntentsQuote": {
				"properties": {
					"quote": {
						"$ref": "#/components/schemas/Quote",
						"description": "Response that contains the deposit address to send \"amount\" of `originAsset` and possible output amount."
					},
					"quoteRequest": {
						"$ref": "#/components/schemas/QuoteRequest",
						"description": "User request"
					},
					"signature": {
						"type": "string",
						"description": "Signature of the 1Click service confirming the quote for the specific deposit address. Must be saved on the client side (along with the whole quote) in order to resolve any disputes or mistakes."
					},
					"timestamp": {
						"type": "string",
						"description": "Timestamp in ISO format that took part in the deposit address derivation"
					}
				},
				"required": [
					"quote",
					"quoteRequest",
					"signature",
					"timestamp"
				],
				"type": "object"
			},
			"QuoteResponseModel": {
				"properties": {
					"amountTo": {
						"type": "string",
						"example": "10000"
					},
					"originalQuote": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CowswapQuote"
							},
							{
								"$ref": "#/components/schemas/NearIntentsQuote"
							}
						]
					},
					"quoteSource": {
						"type": "string",
						"enum": [
							"NEARINTENTS",
							"COWSWAP",
							"1INCH"
						],
						"example": "COWSWAP"
					}
				},
				"required": [
					"amountTo",
					"originalQuote",
					"quoteSource"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QuoteKind": {
				"type": "string",
				"enum": [
					"EXACT_INPUT",
					"EXACT_OUTPUT"
				]
			},
			"QuoteRequestModel": {
				"properties": {
					"amount": {
						"type": "string"
					},
					"accountFrom": {
						"type": "string"
					},
					"tokenFrom": {
						"type": "string"
					},
					"chainFrom": {
						"type": "string"
					},
					"accountTo": {
						"type": "string"
					},
					"tokenTo": {
						"type": "string"
					},
					"chainTo": {
						"type": "string"
					},
					"depositNative": {
						"type": "boolean"
					},
					"recipientNative": {
						"type": "boolean"
					},
					"slippage": {
						"type": "number",
						"format": "double"
					},
					"kind": {
						"$ref": "#/components/schemas/QuoteKind"
					},
					"ttl": {
						"type": "number",
						"format": "double"
					},
					"appData": {
						"type": "string"
					},
					"isSmartContractWallet": {
						"type": "boolean"
					},
					"isNative": {
						"type": "boolean"
					},
					"requestId": {
						"type": "string"
					}
				},
				"required": [
					"amount",
					"accountFrom",
					"tokenFrom",
					"chainFrom",
					"tokenTo",
					"chainTo",
					"slippage",
					"kind",
					"ttl"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "nebula-api",
		"version": "1.0.0",
		"description": "Nebula API",
		"license": {
			"name": "ISC"
		},
		"contact": {
			"name": "Nebula"
		}
	},
	"paths": {
		"/tokens": {
			"get": {
				"operationId": "GetTokens",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TokenModel"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Tokens"
				],
				"security": [],
				"parameters": []
			}
		},
		"/tokens/prices": {
			"get": {
				"operationId": "GetTokenPrices",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/TokenPriceModel"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Tokens"
				],
				"security": [],
				"parameters": []
			}
		},
		"/tokens/{address}": {
			"get": {
				"operationId": "GetToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/TokenModel"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Tokens"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "chain",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/quote": {
			"post": {
				"operationId": "GetQuote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/QuoteResponseModel"
										},
										{
											"properties": {
												"error": {
													"type": "string"
												}
											},
											"required": [
												"error"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"404": {
						"description": "No quote found",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {
											"type": "string"
										}
									},
									"required": [
										"error"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Quote"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/QuoteRequestModel"
							}
						}
					}
				}
			}
		},
		"/near/{address}/{chain}": {
			"get": {
				"operationId": "GetToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"NEAR"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "chain",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/health": {
			"get": {
				"operationId": "CheckHealth",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"status": {
											"type": "string"
										}
									},
									"required": [
										"status"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}